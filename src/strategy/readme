将变化的部分封装起来，例如在这个例子中，可以发现，我们变化的需求是
不断改变的鸭子的行为，然而当我们使用继承来实现这个操作的时候，我们首先想到的
是将设计一个Duck类，这个类里面定义了很多的行为，下面的鸭子类将
实现这个类中的所有的方法，但是，子类中不一定全部都相同的行为，如果
不同，则还需要通过硬编码的方式来修改这个类，类的数量如果很多的时候则会出现问题
，维护起来很困难，所以我们得到第一个原则：
                    多用组合，少用继承来实现低耦合的程序设计

 然而将那些变化行为，例如disply()方法则是不变的，所以，这个可以让所有的集成的子类根据
 自己的需要进行编写，然而抽离的其他的方法，如quack，以及fly这两个行为都是不同的鸭子种
 类其实现是不同的。
 所以，这里有体现了面向接口的编程，通过定义一个FlyBehavior接口来实现多态的性质，即通过
 这个接口能够给其他的行为定义一个规范。
 然后通过一个Duck的抽象类来实现结合，将在Duck类中添加两个成员变量，FlyBehavior和Quack类的
 实例对象。通过一层包装来实现对于行为方法的调用，如：
 public void performFly(){
    flyBehavior.fly();
 }
 这样就可以避免了在实际的子类中进行硬编码，从而将注意力从以实现为目标的编程方式转换为
 以接口（结合多态）为目的的编程。

 类似于一种策略，将原来定义为东西抽象为类的方式，转换为将一种行为作为一个类进行组合的方式

关键点：面向接口编程；转换抽象思维。即将一个行为由一个类的成员函数转换为一个单独的行为类
的方式（类比参考）。